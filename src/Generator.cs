/*
*  UPPAAAL2C (c) 2014 Ariel Eizenberg - arieleiz@seas.upenn.edu.
*
*    This file is part of UPPAAAL2C. You can redistribute it and/or modify
*    it under the terms of the Academic Free License 3.0
*	  (http://opensource.org/licenses/AFL-3.0).
*
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace uppaal2c
{
    class Generator
    {
        public Generator(Model m)
        {
            _model = m;
        }

        public void generate(string outdir)
        {
            lock (this)
            {
                createOutputFile(Path.Combine(outdir, "model.h"), false);
                createOutputFile(Path.Combine(outdir, "model.c"), true);

                string mainpath = Path.Combine(outdir, "main.c");
                if (!File.Exists(mainpath))
                    createMainFile(mainpath);
                else
                    Console.WriteLine(String.Format("Skipping {0}, already exists.", mainpath));
            }
        }

        private void createOutputFile(string path, bool isSource)
        {
            _isSource = isSource;
            _sb = new StringBuilder();

            if (!_isSource)
                app("#pragma once");

            app("// THIS FILE WAS AUTO GENERATED BY uppaal2c.exe DO NOT MODIFY!!!");
            app();
            if(_isSource)
            {
                app("#include \"model.h\"");
                app("#include \"uppaal2c_private.h\"");
            }
            else
            {
                app("#include \"uppaal2c.h\"");
            }
            app();
            app("#ifdef __cplusplus");
            app("extern \"C\" {{ ");
            app("#endif");

            app("// Channels");
            foreach (var v in _model.Declarations.getVarsByType(VarType.Channel))
            {
                FormatChannel("GLOBAL", v);
            }
            foreach (Template t in _model.Templates)
            {
                foreach (var v in t.Declarations.getVarsByType(VarType.Channel))
                    FormatChannel(t.Name, v);
            }
            app();
            FormatChannelList();
            app();

            FormatVariables();

            foreach (Template t in _model.Templates)
            {
                FormatTemplate(t);
            }

            FormatTemplateList();

            app();
            app("#ifdef __cplusplus");
            app("}} // extern \"C\" ");
            app("#endif");

            writeOutput(path);
        }

        private void writeOutput(string path)
        {
            Console.WriteLine(String.Format("Generating {0} ...", path));
            using (StreamWriter sw = new StreamWriter(path))
            {
                sw.Write(_sb.ToString());
            }
        }

        private void FormatChannelList()
        {
            if (_isSource)
            {
                app("// ChannelsList");
                app("U2C_CHANNEL* ALL_CHANNELS[TOTAL_CHANNEL_COUNT] = ");
                app("    {{");
                FormatTemplateChannelList(_model.Declarations);
                foreach (Template t in _model.Templates)
                {
                    FormatTemplateChannelList(t.Declarations);
                }
                app("    }};");
                app();
            }
            else
            {
                int count = 0;
                countChannels(_model.Declarations, ref count);
                foreach (Template t in _model.Templates)
                {
                    countChannels(t.Declarations, ref count);
                }

                app("#define TOTAL_CHANNEL_COUNT {0}", count);
                app("extern U2C_CHANNEL* ALL_CHANNELS[TOTAL_CHANNEL_COUNT];");

            }
        }

        private void countChannels(Declarations d, ref int sum)
        {
            foreach (var v in d.getVarsByType(VarType.Channel))
            {
                if (v.IsArray)
                    sum += v.ArrLength;
                else
                    sum += 1;
            }
        }

        private void FormatTemplateChannelList(Declarations d)
        {
            foreach (var v in d.getVarsByType(VarType.Channel))
            {
                if (v.IsArray)
                {
                    for (int i = 0; i < v.ArrLength; ++i)
                        app("        &{0}_{1},", getUniqueName(v), i);
                }
                else
                    app("        &{0},", getUniqueName(v));
            }
        }

        private void FormatChannel(string template, VarDecl v)
        {
            string name = getVarDeclName(v, template);
            if (v.IsArray)
            {
                for (int i = v.ArrLow; i < (v.ArrLow + v.ArrLength); ++i)
                    FormatChannel(template, v, name, String.Format("_{0}", i));

                if (_isSource)
                {
                    app();
                    app("U2C_CHANNEL* const {0}_ARRAY[] = ", name);
                    app("    {{");
                    for (int i = v.ArrLow; i < (v.ArrLow + v.ArrLength); ++i)
                        app("        &{0}{1},", name, String.Format("_{0}", i));
                    app("        NULL");
                    app("    }};");
                    app();
                }
            }
            else
                FormatChannel(template, v, name, "");
        }

        private void FormatChannel(string template, VarDecl v, string name, string postfix)
        {
            if(_isSource)
            {
                app("const U2C_CHANNEL_DATA {0}{1}_DATA = // {2}", name, postfix, v.NiceName());
	            app("    {{");
		        app("        DBG_FIELD(\"{0}[{1}]\")	// name", v.NiceName(), postfix.TrimStart('_'));
		        app("        {0},				// urgent", formatBool(v.Type.Urgent));
		        app("        {0},				// broadcast", formatBool(v.Type.Broadcast));
	            app("    }};");
                app();
                app("U2C_CHANNEL {0}{1} = // {2}", name, postfix, v.NiceName());
                app("    {{");
                app("        &{0}{1}_DATA,         // data",  name, postfix);
                app("        NULL,              // firedcb");
                app("        NULL,              // context");
                app("        U2C_FALSE,              // cur_fired");
                app("        U2C_FALSE,              // prev_fired");
                app("    }};");
                app();
            }
            else 
            {
                app("extern U2C_CHANNEL {0}{1}; // {2}", name, postfix, v.NiceName());
            }
        }

        private void FormatSingleVarDeclaration(string typestr, string prefix, VarDecl vd)
        {
            string arpostfix = getArraryDecl(vd);
            string name = setUniqueName(vd, String.Format("{0}_{1}_{2}{3}", typestr, prefix, vd.Name, arpostfix));
            app("        {0}{1} {2};", vd.Type.Const ? "const " : "", typestr, name);
        }

        private void FormatDeclarations(string prefix, Declarations decl)
        {
            foreach (VarDecl vd in decl.getVarsByType(VarType.Clock))
            {
                FormatSingleVarDeclaration("u2c_clk_t", prefix, vd);
            }
            foreach (VarDecl vd in decl.getVarsByType(VarType.Int))
            {
                FormatSingleVarDeclaration("int", prefix, vd);
            }
        }

        private void FormatSingleVarInitialization(VarDecl vd, Declarations decl)
        {
            string name = getUniqueName(vd);
            if (!vd.HasExpr)
                return;

            int val;
            if (!decl.getExprValue(vd.Expr, out val))
                throw new CodeGenException(String.Format("Cannot use non const variable!"));

            app("\t{0}.{1} = {2};", StateStructName, name, val); 
        }

        private void FormatDeclarationsInitialization(Declarations decl)
        {
            foreach (VarDecl vd in decl.getVarsByType(VarType.Clock))
            {
                FormatSingleVarInitialization(vd, decl);
            }
            foreach (VarDecl vd in decl.getVarsByType(VarType.Int))
            {
                FormatSingleVarInitialization(vd, decl);
            }
        }

        private static string getArraryDecl(VarDecl vd)
        {
            string postfix = "";
            if (vd.IsArray)
                postfix = String.Format("[{0}]", vd.ArrLength);
            return postfix;
        }

        private void FormatVariables()
        {
            if (_isSource)
            {
                app("U2C_SYSTEM_STATE {0};", StateStructName);
                app();
                app("void init_system_variables() {{");
                FormatDeclarationsInitialization(_model.Declarations);
                foreach (Template t in _model.Templates)
                {
                    FormatDeclarationsInitialization(t.Declarations);
                }
                app("}}");
                app();
            }
            else
            {
                app("typedef struct {{");
                FormatDeclarations("GLOBAL", _model.Declarations);
                foreach (Template t in _model.Templates)
                {
                    FormatDeclarations(t.Name, t.Declarations);
                }
                app("}} U2C_SYSTEM_STATE;");
                app();
                app("extern U2C_SYSTEM_STATE {0};", StateStructName);
                app();
            }

        
        }

        private void FormatTemplate(Template t)
        {
            app("// Process - {0}", t.Name);
            app();
            foreach (StateTransition st in ChannelPriority.getSortedTransitions(t.Declarations, t.Transitions))
                FormatTransition(t, st);
            foreach (StateNode sn in t.Nodes)
                FormatNode(t, sn);
            FormatProcess(t);
            app();
        }

        private string FormatGuardFunction(string objname, Declarations decls, IEnumerable<Rule> rules)
        {
            GuardRule guard = (GuardRule)rules.SingleOrDefault(x => x is GuardRule);
            if (guard == null)
                return NULL;

            string funcname = String.Format("guardfunc_{0}", objname);
            ExpressionGenerator eg = new ExpressionGenerator(getUniqueName, decls, StateStructName);
            app("static U2C_BOOL {0}()", funcname);
            app("{{");
            app("    {0}", eg.generate(guard));
            app("}};");
            return funcname;
        }

        private string FormatUpdateFunction(string objname, Declarations decls, IEnumerable<Rule> rules)
        {
            UpdateRule[] urules = (rules.Where(x => x is UpdateRule).Select(x => (UpdateRule)x).ToArray());
            if (urules == null || urules.Length == 0)
                return NULL;

            string funcname = String.Format("updatefunc_{0}", objname);
            ExpressionGenerator eg = new ExpressionGenerator(getUniqueName, decls, StateStructName);
            app("static void {0}()", funcname);
            app("{{");
            foreach (UpdateRule ur in urules)
            app("    {0}", eg.generate(ur));
            app("}};");
            return funcname;
        }

        private void FormatTransition(Template t, StateTransition st)
        {
            string name = setUniqueName(st, String.Format("{0}_TRANS_{1}", t.Name, st.Name));

            if (_isSource)
            {
                string guard_name = FormatGuardFunction(name, t.Declarations, st.Rules);
                string update_name = FormatUpdateFunction(name, t.Declarations ,st.Rules);

                app("const U2C_TRANSITION_DATA {0}_DATA =", name);
                app("    {{");
                app("        DBG_FIELD(\"{0}\")	// name", st.Name);
                app("        &{0},				// target", getUniqueName(st.Target));
                app("        {0},				// receive", getSyncChannel(t, st, SyncRule.Direction.Receive));
                app("        {0},				// send", getSyncChannel(t, st, SyncRule.Direction.Send));
                app("        {0},               // guard", (guard_name != null) ? guard_name : NULL);
                app("        {0},               // update", (update_name != null) ? update_name : NULL);
                app("    }};");
                app();
                app("U2C_TRANSITION {0} =", name);
                app("    {{");
                app("        &{0}_DATA,         // data", name);
                app("        NULL,              // transition_execute_cb");
                app("        NULL,              // context");
                app("    }};");
                app();
            }
            else
            {
                app("extern U2C_TRANSITION {0};", name);
            }
        }


        private void FormatNode(Template t, StateNode sn)
        {
            string name = setUniqueName(sn, String.Format("{0}_STATE_{1}", t.Name, sn.Name));

            if (_isSource)
            {
                string guard_name = FormatGuardFunction(name, t.Declarations, sn.Rules);

                app("const U2C_TRANSITION* {0}_OUT[] = ", name);
                app("    {{");
                foreach(StateTransition st in t.Transitions.Where(x => x.Source == sn))
                {
                    app("        &{0}, // {1}", getUniqueName(st), st.Name);
                }
                app("    NULL");
                app("    }};");
                app();

                app("const U2C_STATENODE_DATA {0}_DATA =", name);
                app("    {{");
                app("        DBG_FIELD(\"{0}\")	// name", sn.Name);
                app("        (U2C_TRANSITION* const*)&{0}_OUT,	// target", name);
                app("        {0}, // mode", getModeString(sn));
                app("        {0}, // guard", guard_name);
                app("    }};");
                app();
                app("U2C_STATENODE {0} =", name);
                app("    {{");
                app("        &{0}_DATA,         // data", name);
                app("        NULL,              // state_enter");
                app("        NULL,              // state_leave");
                app("        NULL,              // context");
                app("    }};");
                app();
            }
            else
            {
                app("extern U2C_STATENODE {0};", name);
            }
        }

        private void FormatProcess(Template t)
        {
            string name = setUniqueName(t, String.Format("{0}_TASK", t.Name));
            if (_isSource)
            {
                app("const U2C_TASK_DATA {0}_DATA = ", name);
                app("    {{");
                app("        DBG_FIELD(\"{0}\")	// name", name);
                //app("        (STATE_ENTRY* const*)&{0}_STATE_TBL,	// states", name);
                app("        &{0}, // initState", getUniqueName(t.Initial));
                app("    }};");
                app();
                app("U2C_TASK {0} = ", name);
                app("    {{");
                app("        &{0}_DATA,         // data", name);
                app("        NULL,              // process_start");
                app("        NULL,              // context");
                app("        &{0},              // current", getUniqueName(t.Initial));
                app("        U2C_FALSE,              // stepped");
                app("        U2C_FALSE,              // normal_stepped");
                app("        U2C_ProcessInit,        // state");
                app("    }};");
                app();
            }
            else
            {
                app("extern U2C_TASK {0};", name);
                app();
            }
        }

        private void FormatTemplateList()
        {
            if (_isSource)
            {
                app("U2C_TASK* U2C_TASK_LIST[{0}] =", _model.Templates.Length);
                app("{{");
                for (int i = 0; i < _model.Templates.Length; ++i)
                    app("   NULL,");
                app("}};");
                app();
                app();
            }
            else
            {
                app();
                app("#define U2C_TOTAL_TASK_COUNT {0}", _model.Templates.Length);
                app("extern U2C_TASK* U2C_TASK_LIST[U2C_TOTAL_TASK_COUNT];");
                app();
            }
        }

        const string NULL = "NULL";

        private string getSyncChannel(Template t, StateTransition st, SyncRule.Direction dir)
        {
            SyncRule r = (SyncRule)st.Rules.SingleOrDefault(x => x is SyncRule);
            if (r == null)
                return NULL;
            if(r.Dir != dir)
                return NULL;

            return getSyncChannelCode(getUniqueName, t, r);
        }

        public static string getSyncChannelCode(GetNameDelegate getname, Template t, SyncRule r)
        {
            VarDecl vd;
            switch (r.Expr.Type)
            {
                case Expression.ExpType.Func:
                    // might be array/range
                    if(r.Expr.Func != Expression.Funcs.ArrayIndex)
                        throw new CodeGenException("Only array dereferencing allowed on channels!");
                    if(r.Expr.First.Type != Expression.ExpType.Var)
                        throw new CodeGenException("Synchronization rule must be a channel!");
                    int idx;
                    if (t.Declarations.getExprValue(r.Expr.Second, out idx))
                    {
                        vd = t.Declarations.getVar(r.Expr.First.Var);
                        if (vd == null || vd.Type.Type != VarType.Channel)
                            throw new CodeGenException(String.Format("Could not find '{0}' in declarations for template '{1}' or GLOBALly!", r.Expr.First.Var, t.Name));
                        return String.Format("{0}_ARRAY[{1}]", getname(vd), idx - vd.ArrLow);
                    }
                    else
                    {
                        // add support for this later
                        throw new CodeGenException("Channel array index must be a constant, dynamic channel index not yet support (but will be)!");

                    }
                    
                case Expression.ExpType.Var:
                    vd  = t.Declarations.getVar(r.Expr.Var);
                    if(vd == null || vd.Type.Type != VarType.Channel)
                        throw new CodeGenException(String.Format("Could not find '{0}' in declarations for template '{1}' or GLOBALly!", r.Expr.Var, t.Name));

                    return String.Format("&{0}", getname(vd));

                default:
                    throw new CodeGenException("Synchronization rule must be a channel");
            }
        }

        private static string formatBool(bool b)
        {
            return b ? "U2C_TRUE" : "U2C_FALSE";
        }

        private static string getModeString(StateNode sn)
        {
            switch (sn.Mode)
            {
                case NodeMode.Regular:
                    return "U2C_StateNormal";
                case NodeMode.Urgent:
                    return "U2C_StateUrgent";
                case NodeMode.Commited:
                    return "U2C_StateCommited";
            }
            throw new CodeGenException("Unknown mode!");
        }

        private string getVarDeclName(VarDecl v, string template)
        {
            string name;
            if (_names.TryGetValue(v, out name))
                return name;

            return setUniqueName(v, String.Format("{0}_CHANNEL_VAR_{1}", template, v.Name));
        }

        private string getUniqueName(object o)
        {
            return _names[o];
        }

        private string setUniqueName(object o, string name)
        {
            string outname;
            if (_names.TryGetValue(o, out outname))
                return outname;

            _names.Add(o, name);
            return name;
        }

        private void app()
        {
            _sb.AppendLine();
        }

        private void app(string fmt, params object[] obj)
        {
            _sb.AppendFormat(fmt, obj);
            _sb.AppendLine();
        }

        private void createMainFile(string outpath)
        {
            var ca = new ChannelAnalyzer(_model, getUniqueName);

            _sb = new StringBuilder();
            app("#include \"uppaal2c.h\"");
            app("#include \"model.h\"");
            app();
            app("static void init_tasks();");
            app("static void init_inputs();");
            app("static void init_outputs();");
            app("static void init_callbacks();");
            app();
            app("int main (void)"); 
            app("{{");
            app("\tu2c_init();");
            app("\tu2c_set_clock_multiplier(1000 /*us*/);");
            app();
            app("\tinit_inputs();");
            app("\tinit_outputs();");
            app("\tinit_callbacks();");
            app("\tinit_tasks();");
            app("\tu2c_run();");
            app();
            app("}}");
            app();
            app("static void init_tasks()");
            app("{{");
            foreach (Template t in _model.Templates)
                app("\tu2c_add_task(&{0});", getUniqueName(t));
            app("}}");
            app();
            app("static void init_inputs()");
            app("{{");
            app("\t// uncomment and edit required hardware inputs");
            foreach (var s in ca.getDirOnlyChannels(SyncRule.Direction.Receive))
            {
                app("\t//u2c_set_channel_input({0}, /*fill pin here*/, /*fill mode here*/, /*U2C_ReceiveChannel...*/);", s);
            }
            app("}}");
            app();
            app("static void init_outputs()");
            app("{{");
            app("\t// uncomment and edit required hardware outputs");
            foreach (var s in ca.getDirOnlyChannels(SyncRule.Direction.Send))
            {
                app("\t//u2c_set_channel_output({0}, /*fill pin here*/, /*U2C_SendChannelMode...*/, 0 /* or pulse time */);", s);
            }
            app("}}");
            app();
            app("static void init_callbacks()");
            app("{{");
            foreach (var s in _model.Templates)
            { 
                app("\t// --- {0} ---", s.Name);
                app("\t// === uncomment and edit required process callbacks ===");
                app("\t//u2c_set_process_start_cb(&{0}, /*function*/, /*ctx*/);", getUniqueName(s));
                app("\t// === uncomment and edit required state callbacks ===");
                foreach (var sn in s.Nodes)
                {
                    app("\t//u2c_set_state_enter_cb(&{0}, /*function*/, /*ctx*/);", getUniqueName(sn));
                    app("\t//u2c_set_state_leave_cb(&{0}, /*function*/, /*ctx*/);", getUniqueName(sn));
                }
                app("\t// == uncomment and edit required transition callbacks ===");
                foreach (var sn in s.Transitions)
                {
                    app("\t//u2c_set_transition_execute_cb(&{0}, /*function*/, /*ctx*/);", getUniqueName(sn));
                }
            }

            app("}}");
            app();


            writeOutput(outpath);
        }

        private Model _model;
        private StringBuilder _sb;
        private bool _isSource;
        private Dictionary<object, string> _names = new Dictionary<object, string>();
        const string StateStructName = "U2C_StateVars";
    }
}

